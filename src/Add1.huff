
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)

#define macro ADD_ONE() = takes(0) returns (0) {
    0x04 calldataload     // load first 32 bytes onto the stack
    0x01                  // load 1 onto the stack
    add                   // add numbers and put the result onto the stack

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}

// Function Dispatching
#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr          // [func_sig]

    dup1 __FUNC_SIG(add1)            eq add1Jump          jumpi

    // Revert if no match is found.
    0x00 dup1 revert

    add1Jump:
        ADD_ONE()

}

// DONE