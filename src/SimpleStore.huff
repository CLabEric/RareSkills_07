
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)

#define macro STORE() = takes (0) returns (0) {
    0x04 calldataload   // get calldata but skip fn sig

    0x00                // store at slot 0
    sstore
}

#define macro READ() = takes (0) returns (0) {
    0x00                // get value at storage slot 0
    sload

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload       // get function sig
    0xe0 shr

    // look up functions and call them if appropriate
    dup1 __FUNC_SIG(store) eq store jumpi
    dup1 __FUNC_SIG(read) eq read jumpi

    // Revert if no function matches
    0x00 0x00 revert

    store:
        STORE()
    read:
        READ()
}

// DONE